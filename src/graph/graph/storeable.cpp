#include "storeable.h"

namespace graph {

  /* ----------------------------------------------------------------------------------------
   *
   * --------------------------------------------------------------------------------------*/
  Storeable::Storeable(gid id, std::size_t size) : m_graphid(id) {
    this->m_buffer = new ByteBuffer(size);
    for(std::size_t i =0; i < size; i++) {
      this->m_buffer->Append(0x0);
    }
  }


  /* ----------------------------------------------------------------------------------------
   *
   * --------------------------------------------------------------------------------------*/
  Storeable::Storeable(gid id, ByteBuffer *buf) : m_graphid(id) {
    this->m_buffer = new ByteBuffer(buf);
  }

  /* ----------------------------------------------------------------------------------------
   *
   * --------------------------------------------------------------------------------------*/
  Storeable::~Storeable() {
    delete this->m_buffer;
  }

  /* ----------------------------------------------------------------------------------------
   *
   * --------------------------------------------------------------------------------------*/
  std::uint8_t Storeable::GetFlag() {
    return this->m_buffer->GetUint8(0);
  }

  /* ----------------------------------------------------------------------------------------
   *
   * --------------------------------------------------------------------------------------*/
  void Storeable::SetFlag(std::uint8_t flag) {
    this->m_buffer->Set(0,flag);
  }

  /* ----------------------------------------------------------------------------------------
   *
   * --------------------------------------------------------------------------------------*/
  gid Storeable::GetTypeId(){
    return (gid)this->m_buffer->GetUint32(1);
  }

  /* ----------------------------------------------------------------------------------------
   *
   * --------------------------------------------------------------------------------------*/
  void Storeable::SetTypeId(gid type) {
    this->m_buffer->Set(1, (std::uint32_t) type);
  }


}
